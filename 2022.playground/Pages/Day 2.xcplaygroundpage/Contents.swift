import Foundation

let input = """
C Y
C X
A Z
B X
B Z
C X
C X
B Z
C X
B Z
C X
C X
A X
C Y
A X
C Y
B Y
C X
C Y
B Z
A X
C X
B X
B X
B Z
A Z
C Z
B Z
B Z
C X
B Z
C X
B Z
B Z
C X
C Y
B Z
C Y
A Z
B Y
C X
C Y
A Z
B Z
B Z
C X
C Y
B X
B Z
A X
B X
A X
B Z
C Y
C Y
A X
C X
C X
B X
A Z
C Y
C X
B Z
A Z
C Y
B X
C Y
B Z
C X
B X
B Z
B Z
C Z
B Y
C Y
B Y
A Z
A X
A Y
A Y
C Y
C X
C X
B Z
B X
C X
B Z
A Z
C Y
C Z
C Z
B X
B Z
C Y
A Y
A X
C X
B Z
B Y
B X
B Z
B Z
A X
C Y
C Y
C X
A X
B Z
A Z
A X
B Z
C X
C Z
C Z
C Y
C Z
B Z
C Z
C Y
B Z
A X
C Y
B X
C Y
B Z
C Y
A Z
A X
B Z
A X
A Y
B Z
C X
C Y
C Y
B Z
B Z
A Z
C X
A Z
A X
A Z
B Z
B X
A Z
B Z
B Y
C X
C Y
C X
C X
A Z
A Z
C Y
B Z
C Y
B X
C Y
C Y
B Z
C X
B Z
A Z
C Y
C Y
B Z
A X
C X
B Z
C X
B Y
A Y
C X
B X
C Y
B Z
C Z
C X
C Z
B Z
B Y
A X
A Z
B Z
A Z
C X
A X
C X
C Y
C Z
A Z
B Z
B X
B X
A Y
B Y
C Y
B Y
B Z
A X
A Y
A Z
B X
B Z
C Z
C Z
B Z
C Y
C Y
C X
C X
B Z
B Z
C Y
A Z
C X
C Y
A Y
A X
B Z
C Z
C X
C X
C X
A Z
C Y
B Z
B Z
C X
C Y
C Z
B Z
C Y
A X
A Z
A Z
C Y
A X
B Z
C Y
C X
C X
B Z
C Z
B Z
B Z
B X
A Z
C Y
C Y
C X
B Z
B Y
B Z
B Z
C Y
A X
A Y
C Y
A X
C Y
C Z
A Y
A X
B Z
A X
A X
A Y
B X
B Z
C Z
B Z
B Z
B X
B X
C X
A X
C Y
C X
C Y
A X
B Z
A X
A Y
B Z
C Y
B Z
B Z
C Y
A Y
A Z
C X
C Y
C Y
C X
C Z
C Y
B Z
C Z
B X
C Z
B Z
A Z
B X
C X
C X
B X
B Z
C X
C X
B X
A Z
A X
A Z
B Z
B Z
B Z
A X
C Y
C Y
B Z
A X
A X
B Y
C Y
B X
C X
C Y
C X
C Y
A X
B X
A Z
A Y
B Y
A Z
B X
B Z
B Z
A Y
B X
C Y
B X
B Z
B Y
A X
A Z
C X
C X
C Z
C Z
B X
C X
B X
C X
B X
B Z
B Z
B X
B Y
C Y
A Z
B Y
A Z
C Y
B Z
C Z
C Z
B Y
B X
B X
C X
A Y
A Z
B Y
A Z
A Z
A X
A Z
B Y
A X
A X
C Z
C X
C X
C X
C Z
A Z
C Z
B Y
B Z
A X
B Z
C Z
C X
C Y
C X
A Z
C Y
C Y
C Y
B X
C Y
A Y
C Y
C X
A Z
A X
B Z
C Z
C X
A X
B Y
C Y
B Z
B Z
B Z
C Z
A Z
C Y
C X
C Z
C X
B Z
B Z
A X
B Z
A Z
A Z
B X
C Y
C Y
A X
B X
B Y
A X
C Y
A Z
C Y
C Y
B X
B X
B Z
B X
A Y
C Y
C Y
C Z
B X
A Y
A X
A X
C Y
C Z
C Y
A X
C Y
A X
B Y
B X
A X
C X
C X
A X
A Z
A X
C Y
B Y
B Z
B Y
C Z
A Z
B Y
A Z
A X
C X
B Z
C Z
B X
B Z
A Z
B Z
C X
B Z
B X
B Y
C Z
B Y
C Y
C X
C X
C Y
A Z
B Z
B X
B Z
B X
C Z
A X
A X
A X
B Y
B Y
B Z
A X
B Z
A X
A Z
B Z
B X
B X
A Z
A X
B Z
C Z
C Z
C Z
B Z
C Y
C X
C X
B Z
C Z
B Z
C Y
C X
B Z
C Z
B Z
B Z
B Z
C X
C X
B Y
B Z
B Z
C X
C Y
A X
A Z
C Z
C Z
C X
C Y
A Z
C Z
B Z
B Z
C Y
C X
B X
B Z
A Z
B Z
C Y
A X
B X
A X
C Z
C Y
C X
C X
B Z
C Z
B Z
C Z
C Z
A X
B Z
B Y
B Z
C X
B Z
A Z
C X
A X
B Z
C Z
C X
A X
C Z
A Y
B Z
C Z
C Y
A Z
B X
C Z
A X
A Y
C X
C Z
B Z
C X
A Z
B Z
C Z
C Z
A Y
C Y
C X
A Y
B Z
A Y
C X
C X
C Z
B X
B Z
C Y
A X
A Z
B Z
B Z
C Z
B Z
A X
A Y
B Y
A Z
B Z
B Z
C X
A Y
C Y
B Z
C X
B Y
B X
C Y
C X
B Z
B Z
B Z
C Y
B X
A X
B Z
C X
C Z
C X
A Z
B Z
C Y
B Z
A X
A X
B Z
C Z
C Z
B X
A Z
C Z
C X
B X
C Y
B Z
A X
C X
A Z
C Z
B X
B Z
A X
A X
B Z
C Y
C X
A Y
C X
C X
A X
A Z
B Y
C Z
C Z
C X
A Y
C X
B X
C X
B Y
C Y
B Z
A Z
C Z
A Y
A Z
B Y
C X
B Z
C X
C Y
C Z
B X
A X
C X
A Z
B Z
A Y
C Y
B Z
C X
C X
C X
B Y
C Y
B X
C X
A Z
A Y
A Z
C X
C Z
C X
C Z
B Y
A Z
B Z
C Z
B Z
B Z
C X
B Z
A Z
C Z
C Z
C X
A Y
B X
B Z
A Z
B Z
A X
B Z
C Y
C X
C X
A X
C X
B X
C Y
C X
B Z
B Z
C X
B Y
C Y
B Y
B X
C X
B X
B Z
B Z
C Y
A X
A X
A Z
A Y
C X
B Y
B Y
A Y
C Z
B X
B Z
B Z
C X
C Y
B Z
C Y
C Z
C X
C Z
A Z
B Y
A Z
B Z
C Y
C X
C Y
B Z
B Z
C X
C X
B Z
A X
A Z
C Y
B Y
A Y
B X
B X
A Z
B Z
B Z
A Z
A Z
C X
C X
C Y
C Z
A Y
C Y
B X
B Z
C X
B Z
C Z
B Z
C X
B Z
B X
A Y
B Z
C X
C Y
B Z
C X
C Y
C X
C X
A X
C X
C Y
A Z
B Z
C X
C Y
C Y
A Z
B Z
C X
C X
B X
A X
C X
C Y
B Z
C X
C X
C X
C Z
C Z
B Z
B Z
C Z
C Z
C X
A Z
C Y
C Y
C X
C Z
C Y
A Z
A Z
A Z
C Y
C Y
B X
B Z
B Y
C Z
A Z
C Z
C Y
C Z
A Y
A Y
B X
B Z
B X
A X
B X
C Z
C X
B Z
C Z
C Z
B Z
C X
C X
A X
C Z
C Y
A Z
A Z
C Z
A Y
B Y
B Z
C Z
A Z
A X
C Y
B Z
A X
B Z
B Z
A Z
A X
A Z
C Z
C X
B X
C Y
B Z
B X
C Y
C Y
B Z
C X
C Y
C Z
A Z
B X
C Y
A Z
C X
B Y
B Y
C Y
B Z
B Z
A X
C X
B Z
C X
B Z
B Y
C Y
B X
C Z
B Z
C Z
B Z
B Y
C X
C Z
C Z
C Y
B X
B Z
C Y
B Z
C Z
B Z
B Z
B Y
C X
C Y
C X
C X
A Z
C Y
C Y
C Z
A X
C X
B Y
B X
A Y
C X
B Z
C Y
C Y
B Z
B Y
B Z
C Y
C Y
C Y
C X
C X
A Z
C Y
C X
C X
A Y
C Y
B Z
A X
A X
C X
B Z
C Y
C Z
B Z
B Z
C Z
C Y
B Z
B X
C Z
B Z
C Y
C Z
B X
A Y
A Z
B X
C Z
C Y
A X
B Z
A X
B Z
B X
C Z
C Y
C X
A Z
C Y
C Y
A Z
A X
C Y
A X
A X
A X
B Z
C Y
B Z
B Z
B Z
C X
B Z
A X
B Y
C Y
C X
C X
C Y
C Y
A X
A X
C Y
C Z
B X
C Y
A X
C X
C X
C Y
B Z
B Z
A Y
B Z
C Y
C Y
C Y
B Z
C Z
C X
C X
B Z
C X
B X
B Z
B Y
C X
C Y
A X
B Z
B Z
C X
B Z
B X
B Z
C Y
B Z
C Y
C X
B Z
B Y
A Y
A X
A Z
A Z
B Y
A X
A X
C Y
C Y
A X
B Z
C X
A Z
B Z
B Z
A Y
C X
B Z
A Y
C Z
C Y
B X
C Z
C Z
C X
C Y
C X
C Y
B Z
B Z
B Z
B Z
A X
C Z
B Z
A Z
A X
A X
C X
C Y
C X
C X
C Z
C X
A Y
B Z
C X
A Z
B Z
C Y
B Z
A Z
A X
C X
A Z
C Z
A X
C Z
C Y
C Y
A X
C X
B Y
C Y
C Y
A Z
B Z
A Z
C Z
A Z
C Y
A X
C X
C Y
C Y
B Y
B Z
A Z
C X
B Y
A X
C Y
A Y
C Z
A Z
C Z
A X
B X
A Z
A Y
C X
A X
B Z
B Y
C Y
B Y
C X
B Z
C X
C Y
B Z
B X
B X
A X
C X
C Z
A X
B Z
C X
C X
C Z
B Y
A Z
A X
C Y
C Z
B Z
C X
B Y
B X
C X
C Z
C Y
B Z
A Z
B X
B Z
C X
C Y
C X
C X
B Z
B Z
B Z
B Z
B Z
C X
A Y
C Z
C Y
C X
C X
A Z
B Z
C Y
C Z
B X
B X
C Z
B Z
C Z
B X
B Z
C Z
C Y
B Z
A X
A X
C Y
C Z
C X
C X
A Z
C Z
C Z
B Z
C Z
B X
C X
A X
C X
B X
C Z
C X
A X
C Y
B Z
B X
C X
C X
C Z
B X
B Z
B Z
A Z
B Z
B X
A Z
C Y
B Z
C Z
C X
C Z
B Y
C Y
A X
B Y
B Z
C Z
B X
C Z
C Y
B Z
B Z
B Z
B Z
A X
B X
B Z
B Y
B Y
B Z
A Z
B Z
B Z
B X
B X
C X
B X
A Z
B Z
A Y
C X
B Y
A X
B Z
A X
B Z
C Y
C X
B Z
C Y
A Y
A X
C Z
B X
A Y
B Z
C Y
A X
C Z
C Y
C Z
A Z
B Y
A Z
C Y
C Y
A Y
A Z
C Y
C X
C X
C X
C Z
A Y
C X
C Y
A Z
B Y
B Y
B Z
A Z
B Z
A Y
B X
A Z
B Z
B Y
C Z
A Y
B X
A Z
B Y
B Z
B Z
B Z
B Z
B Z
A X
C Z
C Y
B Z
C X
A X
B Y
A Y
B Z
C Z
C X
C Y
B Z
B Z
C Z
B Z
B X
A X
A X
C X
B X
A Z
B X
C X
C Y
C Y
B Z
A Y
B Z
C Z
C Y
B Y
B Z
C Y
C Y
A Z
A X
A Y
C Z
A Y
C X
B Z
C Y
B Z
B Z
A Z
B Y
C X
B X
C X
B X
A Z
C X
C X
B Z
B X
C X
A X
C X
B Z
C Y
C X
B Z
A Z
B Y
A Z
B X
B X
A Z
B X
C Z
B Z
C Z
B Z
B X
A Z
C X
C X
C X
C Z
C X
C X
A Z
B Z
C Y
A Y
B X
C X
B Z
B X
C X
C Z
C Z
B Z
B Z
B X
C Y
A X
A X
B Z
B Z
B Z
C Z
B Z
C Z
A Y
A Y
B Y
C X
C Z
B Z
B Z
C X
B Z
B X
A Z
C X
B X
A Y
C Y
B Z
C Y
C Z
C Y
C Z
B Z
A X
C Z
B Z
B Z
A X
C X
C Y
C Y
C Y
C Y
B Z
B Z
B Z
C Z
A X
B Z
C Z
B Z
B X
C Z
B Z
C X
C Z
C X
B X
B Z
C X
A Z
B Z
B Y
C Y
B Z
C Z
C Z
C Z
C Y
B Z
B Z
B X
B Z
C Z
C Y
B X
B Z
C X
C Y
B X
C Y
C X
B Z
A Z
C X
A X
C X
A X
A X
B Z
B Z
A Y
B Z
A Z
C X
A Z
B Z
B Z
A Z
A X
B Z
B X
C X
B Z
C X
B X
A X
C Y
C Z
C Z
B Z
A Z
A Z
B Z
C X
B Y
C X
C Y
A Z
C X
C X
B Z
C Y
C Y
C X
B X
C Z
A X
A Y
B X
B Z
B Y
B X
C Y
C Z
B Z
B X
A X
C X
A X
A Z
B Z
B Y
B X
B Y
C Z
C X
C X
C Y
A Y
C Z
C Z
C Z
B X
C Y
C X
A Z
B X
C Y
C Y
A Z
C Z
C X
C X
A X
C X
B Z
B X
A Z
C X
B Z
B Z
B Z
B Z
A X
A Z
B X
B Z
B X
B Y
B X
B Z
A Y
C X
C Z
A Z
C X
C Y
A X
A Z
B X
B Y
C Y
C X
A X
C Z
C X
B Z
A X
B Z
A Y
A X
C Y
C X
C Y
A X
C Y
C Y
C Y
C Z
A X
A X
B Z
C X
B Z
B Z
B Z
C X
C X
B Z
B X
A X
A Z
A Y
C X
A X
A Z
B Z
B Z
C Y
A X
B Z
C Y
A X
A Z
C Y
A Z
C Z
C Z
C Y
C Z
A X
C Y
A Y
A X
A X
B X
A Z
C X
B X
C Y
C X
B Z
B Z
B Z
B Y
B Y
C Y
A X
B Z
A Z
C X
B X
A Z
C X
C Y
C Y
B Z
B Z
A Z
B Y
B Z
B Z
C X
B Y
B Z
B Z
C X
C Y
C Z
A Z
C Y
A X
C X
B Y
B Z
A Y
A X
B Z
B X
C X
A Z
C X
C Y
B X
C Y
C X
A Y
B Z
B Z
C Z
B Z
C Y
C X
C X
B Y
C Z
C X
C Y
A Z
C Y
A Z
A Y
A X
C Y
B Z
A Z
C X
C X
C X
C X
C X
B Z
A Y
A X
A Z
C Y
A Y
B Z
B Z
C X
A X
A X
C X
C X
C X
B X
A X
B Z
B Z
B X
B Z
A Y
C Z
C Y
B X
B X
B Z
A X
A X
B Z
B Z
C X
A X
C X
A Z
A X
C Z
A Z
C Z
B Z
A X
B Y
C Z
A Z
A Z
C X
A Z
B X
B Y
B Z
C X
B X
C X
B Z
B X
C Y
C X
C X
C Y
B Z
A Z
B X
C X
C Y
A Y
C X
A X
B Z
C Y
C Y
C Y
B Z
C Y
B Z
C X
B Z
B Z
A Y
C X
B X
C Z
B Z
B Z
A X
B Y
A X
B Z
C Z
B Z
C Z
A Z
C X
B Z
C X
B Z
C X
B Z
B Z
C X
B X
B Z
A Z
C X
C Y
B X
C Y
C Y
C X
B Z
C X
C X
A X
B Z
C Y
C Y
B Z
B Z
C Z
C X
C Y
B Z
A X
C Y
C Z
B Z
B X
C Y
A Z
C Z
C X
C Y
C X
C Z
A X
B X
C Y
C X
C Y
C X
C X
C Z
C X
C Z
B Z
C X
C X
A Z
C Z
C X
C X
B Z
C Y
B Z
C Y
C X
A X
C Z
C Z
A Z
B X
C Y
A Z
B Y
C Y
B X
C Y
B Z
B Y
B Z
C Z
B Z
C X
C Z
A Y
B Z
B Z
B Y
B X
B Z
C Z
C X
C Y
A Z
C X
C X
C Z
B X
B Z
C X
A Z
A Z
B Y
C X
C X
A X
C X
C X
A Z
B Z
C X
B Z
C X
C Y
B Z
C X
A X
B Z
C X
C Y
A X
C Z
B Z
B Z
C Y
C X
A Y
C Y
C X
C Y
A Z
B Z
A Y
B Y
C Y
A X
A X
C X
B Z
A Z
A X
B Y
B X
C X
B X
C X
C Z
B Y
C Y
C Z
B Z
B Y
A Z
B X
A Z
C X
A X
A X
B Z
B Z
A Y
C X
B Y
C Z
B Z
C X
A X
C X
C Z
A X
C X
C Z
C Z
C X
A X
A X
C Z
A Y
C Z
B Y
C X
C Z
A X
C Z
B Z
C Z
A Z
B Z
C Z
A Y
A Z
B Y
B X
A Y
C X
C Y
B X
B Z
C Z
B Z
C Z
C Z
A X
A Y
C X
B Z
A X
A Y
C Z
C Y
C Y
B Z
C X
B Z
B Z
A Y
B Z
B Z
B Z
B Z
B Z
B Z
B Z
C X
B X
B Z
A X
A X
C X
A Y
C X
C X
C Y
B Z
B X
C Y
A Y
A Y
C X
A Z
B Z
C X
C Z
C X
A Z
B Z
B Z
B X
B Z
C Y
A Y
C X
C X
A Z
B X
B Z
B Z
B X
C Y
C Y
A X
A Z
B Z
B Z
C X
B Y
A X
A X
C X
C Y
C Y
B Y
C X
C X
C X
A X
B Z
A Z
B X
B Z
B Z
A Z
C X
A X
B Z
B Z
C Y
C Y
B Z
C X
B X
C X
B Y
C Y
C X
C X
B Z
A X
A Z
B Z
A X
C X
A Z
C X
A Y
C Y
C Y
A X
C X
C X
C Z
B X
B Z
A Y
B Z
A Y
A X
C X
B Z
C X
C Z
C X
B Z
B Z
B Z
C Z
B Z
A Z
A Z
C Y
C Z
B X
A Y
A Z
A Z
B X
A Z
C Y
B Z
C X
C Y
B Z
A Z
C X
B Z
C X
A Y
B X
C Z
B Z
C X
A Z
B X
B Z
B Z
A Y
B X
A Z
C X
B Y
B Z
C X
C Z
B X
B Z
C X
A X
A Z
A Z
B Z
B Z
C X
B Z
C Z
B Z
C X
C Y
C Z
B Z
B Z
C X
B Y
A X
B X
A X
B Z
B Z
C X
A Z
A Z
A Z
A X
C X
B Z
A Z
C Y
C Z
A Z
C X
A Y
C Y
C Z
C Z
B Z
A X
A Y
C X
A Y
C X
A X
B Z
C Y
A X
B Z
A X
A Y
C X
A X
C Y
B X
B Z
A Z
B Z
A X
C Y
A Y
A Z
A Z
C Z
B Z
B Y
C Y
C X
B Z
A X
A X
C X
C Y
C X
A X
C Z
C X
B X
C X
A X
C X
B Z
A Z
A Z
C Z
C Z
A Z
A X
C Y
C X
B Z
C Y
C X
A Z
C Z
A Z
A Z
C Z
B Z
C X
A Z
B X
C Y
A Z
A X
A Z
A Z
A Z
A Z
C X
C Y
B X
B Z
A X
C Z
C Z
A Z
C X
C Z
B Z
A Z
C Z
C Y
A X
B Z
A Y
A Z
A Z
C Z
B Z
C Y
C X
A Y
A Y
B X
C Y
C X
B Z
C Z
C X
B Y
C X
C X
C Z
C Z
B Z
C Z
A Z
C Y
B Z
C Z
C Z
A Z
B Z
C Y
C Z
A X
B Z
B Z
A Y
B Z
C X
A Z
B X
B Z
C Z
B X
B Z
B Z
A X
A Y
A Z
B Z
B Z
A Z
A Y
B X
C Y
C Y
C Y
A Y
B Z
B X
A Z
A Z
C Y
C X
A Z
A Z
C Y
A Z
C X
C Z
B X
B Z
A X
C Z
A Z
C Y
B Z
A Z
C X
C X
B Z
C Z
B X
B X
A Z
B X
B X
C Y
A X
C Y
C X
C Y
C X
C Z
B X
B X
C X
A Z
B X
B Z
C Z
C Y
C Y
C X
B Z
C Y
B Z
C Y
C Y
B Z
A Z
A X
C Z
A Z
A X
C Y
B X
C Y
A Y
B Z
A Z
A X
C X
C X
A Y
C Z
C X
A X
C Y
B Z
B X
A Y
B Z
C X
C X
B Z
A X
C X
A Z
C Y
A Z
A Z
A X
C Z
B X
A Y
C Z
A Y
C Y
A X
A Z
A Z
A X
B Z
"""
struct PartOne {
  enum Shape: Int {
    case rock = 1
    case paper = 2
    case scissors = 3

    static func from(rawValue: String) -> Shape {
      switch rawValue {
      case "A", "X": return .rock
      case "B", "Y": return .paper
      case "C", "Z": return .scissors
      default: fatalError()
      }
    }

    var winsTo: Shape {
      Shape(rawValue: rawValue == 1 ? 3 : rawValue - 1)!
    }

    var losesTo: Shape {
      Shape(rawValue: rawValue == 3 ? 1 : rawValue + 1)!
    }
  }

  struct Game {
    enum Outcome: Int {
      case lose = 0
      case draw = 3
      case win = 6
    }

    let opponent: Shape
    let me: Shape


    private var outcome: Outcome {
      if opponent == me { return .draw }
      if me.winsTo == opponent { return .win }
      return .lose
    }

    var score: Int {
      me.rawValue + outcome.rawValue
    }
  }

  func main() {
    let games = input.components(separatedBy: .newlines)
      .compactMap { line in
        let letters = line.components(separatedBy: .whitespaces)
        return Game(opponent: Shape.from(rawValue: letters[0]), me: Shape.from(rawValue: letters[1]))
      }

    let result = games
      .compactMap { $0.score }
      .reduce(0, +)
      .description

    print(result)
  }
}

struct PartTwo {
  enum Shape: Int {
    case rock = 1
    case paper = 2
    case scissors = 3

    static func from(rawValue: String) -> Shape {
      switch rawValue {
      case "A": return .rock
      case "B": return .paper
      case "C": return .scissors
      default: fatalError()
      }
    }

    var winsTo: Shape {
      Shape(rawValue: rawValue == 1 ? 3 : rawValue - 1)!
    }

    var losesTo: Shape {
      Shape(rawValue: rawValue == 3 ? 1 : rawValue + 1)!
    }
  }

  struct Game {
    enum Outcome: Int {
      case lose = 0
      case draw = 3
      case win = 6

      static func from(rawValue: String) -> Outcome {
        switch rawValue {
        case "X": return .lose
        case "Y": return .draw
        case "Z": return .win
        default: fatalError()
        }
      }
    }

    let opponent: Shape
    let neededOutcome: Outcome

    private var me: Shape {
      switch neededOutcome {
      case .draw: return opponent
      case .win: return opponent.losesTo
      case .lose: return opponent.winsTo
      }
    }

    var score: Int {
      me.rawValue + neededOutcome.rawValue
    }
  }

  func main() {
    let games = input.components(separatedBy: .newlines)
      .compactMap { line in
        let letters = line.components(separatedBy: .whitespaces)
        return Game(opponent: Shape.from(rawValue: letters[0]), neededOutcome: Game.Outcome.from(rawValue: letters[1]))
      }

    let result = games
      .compactMap { $0.score }
      .reduce(0, +)
      .description

    print(result)
  }
}


PartOne().main()
PartTwo().main()

